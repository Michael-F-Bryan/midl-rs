use crate::syntax::ast::{
    span, Argument, Annotations, Annotation, AnnotationKind, Comment, 
    File, FnDecl, Item, Imports, Interface, Quote, Type, 
};

grammar;

pub File: File = {
    <l:@L> <items:Item*> <r:@R> => File { items, span: span(l, r) }
};

pub Item: Item = {
    <Comment> => Item::Comment(<>),
    <Interface> ";"? => Item::Interface(<>),
    <imports> ";"? => Item::Imports(<>),
};

imports: Imports = {
    <l:@L> "import" <names:Comma<string_literal>> <r:@R> => Imports { names, span: span(l, r) },
};

pub Interface: Interface = {
    <l:@L> <ann:Annotations*> "interface" <name:identifier> <base:base_interface?> "{" 
        <items:interface_item*> 
    "}" <r:@R> 
    => Interface {
        name: name.to_string(),
        span: span(l, r),
        annotations: ann,
        base,
        items,
    }
};

interface_item: FnDecl = {
    <FnDecl> ";" => <>,
};

base_interface: String = {
    ":" <base:identifier> => base.to_string(),
};

pub FnDecl: FnDecl = {
    <l:@L> <return_ty:Type> <name:identifier> "(" <arguments:Comma<Argument>> ")" <r:@R> => FnDecl {name, return_ty, arguments, span: span(l, r) },
};

Argument: Argument = {
    <l:@L> <ann:Annotations?> <ty:Type> <name:identifier> <r:@R> => Argument {name, ty, annotations: ann, span: span(l, r) },
};

pub Annotations: Annotations = {
    <l:@L> "[" <items:Comma<Annotation>> "]" <r:@R> => Annotations { items, span: span(l, r) },
};

Annotation: Annotation = {
    <l:@L> <kind:AnnotationKind> <r:@R> => Annotation { kind, span: span(l, r) },
};

AnnotationKind: AnnotationKind = {
    "object" => AnnotationKind::Object,
    "local" => AnnotationKind::Local,
    "in" => AnnotationKind::In,
    "out" => AnnotationKind::Out,
    "uuid" "(" <guid:r"[[:xdigit:]]{8}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{12}"> ")" => AnnotationKind::Uuid(guid.parse().unwrap()),
    <id:identifier> => AnnotationKind::Word(id),
    <lit:string_literal> => AnnotationKind::StringLiteral(lit),
    <id:identifier> "(" <nested:Annotation> ")" => AnnotationKind::Nested(id, Box::new(nested)), 
};

pub Quote: Quote = {
    <l:@L> "cpp_quote" "(" <s:string_literal> ")" <r:@R> => Quote { content: s, span: span(l, r) }
};

pub Comment: Comment = {
    <l:@L> <s:r"//*[^\n]*"> <r:@R> => Comment { content: s[2..].trim_left().to_string(), span: span(l, r) }
};

pub Type: Type = {
    "char" => Type::Char,
    "short" => Type::Short,
    "int" => Type::Int,
    "long" => Type::Long,
    "unsigned" "char" => Type::Unsigned(Box::new(Type::Char)),
    "unsigned" "short" => Type::Unsigned(Box::new(Type::Short)),
    "unsigned" "int" => Type::Unsigned(Box::new(Type::Int)),
    "unsigned" "long" => Type::Unsigned(Box::new(Type::Long)),
    "void" => Type::Void,
    <ty:Type> "*" => Type::Ptr { inner: Box::new(ty), is_const: false },
    <identifier> => Type::Named(<>),
};

string_literal: String = {
    <s:r#""(?:[^"\\]|\\.)*""#> => s[1..s.len()-1].to_string()
};

identifier: String = {
    <s:r"[\w_][\w\d_]*"> => s.to_string(),
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};